# This file generated by Quarto; do not edit by hand.
# shiny_mode: core

from __future__ import annotations

from pathlib import Path
from shiny import App, Inputs, Outputs, Session, ui

import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from shiny import render, reactive, ui
from shinywidgets import render_widget  

import pandas as pd
import plotly.express as px

# ========================================================================




def server(input: Inputs, output: Outputs, session: Session) -> None:
    df = pd.read_csv("data_for_dashboard.csv")

    cluster_options = ['Show All (C)'] + list(df['cluster'].unique())
    phase_options = ['Show All (P)'] + list(df['phase'].unique())
    status_options = ['Show All (S)'] + list(df['overall_status'].unique())

    # ========================================================================

    ui.input_select("cluster_name2", "Select Cluster", choices=cluster_options, selected='Show All (C)')
    ui.input_select("phase_name2", "Select Phase", choices=phase_options, selected='Show All (P)')
    ui.input_select("status_name2", "Select Status", choices=status_options, selected='Show All (S)')

    # ========================================================================

    @reactive.calc
    def filtered_trials():
        cluster = input.cluster_name2()
        phase = input.phase_name2()
        status = input.status_name2()

        filtered_df = df
        if cluster != 'Show All (C)':
            filtered_df = filtered_df[filtered_df['cluster'] == cluster]
    
        if phase != 'Show All (P)':  # Assuming "Show All (P)" is the label for showing all phases
            filtered_df = filtered_df[filtered_df['phase'] == phase]
    
        if status != 'Show All (S)':  # Assuming "Show All (S)" is the label for showing all statuses
            filtered_df = filtered_df[filtered_df['overall_status'] == status]

        return filtered_df

    # ========================================================================

    @render_widget  
    def tsne_scatter():  
        filtered_df = filtered_trials()
        cluster = input.cluster_name2()
        scatterplot = px.scatter(
            filtered_df, 
            x='x', 
            y='y', 
            color='cluster',
            hover_data={'x': False, 'y': False, 'nct_id': True, 'brief_title': True},
            title=f"t-SNE Visualization of {'All Clusters' if cluster == 'Show All' else cluster}",
            labels={'x': 't-SNE X', 'y': 't-SNE Y'},
            template="plotly_white",
            #legend='cluster'
        ).update_traces(marker=dict(size=10, line=dict(width=1, color='DarkSlateGrey')))#.update_layout(
            #width=900,
            #height=700,
            ##)
        return scatterplot  

    # ========================================================================

    @render.data_frame
    def datagrid():
        filtered_df = filtered_trials()
  
        df_to_show = filtered_df[['nct_id','brief_title','phase','overall_status','cluster']]
        return render.DataGrid(
            df_to_show,
            width="100%",
            filters=True,
        )

    # ========================================================================

    from itables import show

    df_to_show = df[['nct_id','brief_title','phase','overall_status','cluster']]
    df_to_show['nct_id'] = df_to_show['nct_id'].apply(
        lambda x: f'<a href="https://clinicaltrials.gov/study/{x}" target="_blank">{x}</a>'
    )
    show(df_to_show, paging=True, buttons = ['csv'], classes="display")

    # ========================================================================

    @render_widget  
    def phase_bar_chart():  
        filtered_df = filtered_trials()

        phase_order = [
            'Early Phase 1',
            'Phase 1',
            'Phase 1/2',
            'Phase 2',
            'Phase 2/3',
            'Phase 3',
            'Phase 4',
            'Not Applicable'
        ]
            # Count the occurrences of each phase
        phase_counts = filtered_df['phase'].value_counts().reindex(phase_order, fill_value=0).reset_index()
        phase_counts.columns = ['phase', 'count']
    
        # Create the bar chart with counts displayed on top of the bars
        bar_chart = px.bar(
            phase_counts, 
            x='phase', 
            y='count',
            title="Distribution of Phases",
            template="plotly_white",
            category_orders={'phase': phase_order},
            color_discrete_sequence=px.colors.qualitative.Pastel1,  # Set a more vibrant color scale
            text='count'  # Display counts on top of the bars
        )
        bar_chart.update_traces(textposition='outside', textfont_size=12)

        return bar_chart 

    # ========================================================================

    @render_widget
    def status_bar_chart():
        filtered_df = filtered_trials()

        # Count the occurrences of each overall status
        status_counts = filtered_df['overall_status'].value_counts().reset_index()
        status_counts.columns = ['overall_status', 'count']
    
        # Create the bar chart with the correct x and y axes
        bar_chart = px.bar(
            status_counts, 
            x='overall_status', 
            y='count',  # Correctly specify the y-axis as the count
            title="Distribution of Overall Status",
            template="plotly_white",
            text='count',  # Display counts on top of the bars
            color_discrete_sequence=px.colors.qualitative.Pastel1,
            orientation='v'
        )

        bar_chart.update_traces(textposition='outside', textfont_size=12)
    
        return bar_chart

    # ========================================================================



    return None


_static_assets = ["neurotrial_dashboard_files","stride_lab_logo_transparent.png","neurotrial_dashboard_files/libs/quarto-html/tippy.css","neurotrial_dashboard_files/libs/quarto-html/quarto-syntax-highlighting.css","neurotrial_dashboard_files/libs/bootstrap/bootstrap-icons.css","neurotrial_dashboard_files/libs/bootstrap/bootstrap.min.css","neurotrial_dashboard_files/libs/quarto-dashboard/datatables.min.css","neurotrial_dashboard_files/libs/clipboard/clipboard.min.js","neurotrial_dashboard_files/libs/quarto-html/quarto.js","neurotrial_dashboard_files/libs/quarto-html/popper.min.js","neurotrial_dashboard_files/libs/quarto-html/tippy.umd.min.js","neurotrial_dashboard_files/libs/quarto-html/anchor.min.js","neurotrial_dashboard_files/libs/bootstrap/bootstrap.min.js","neurotrial_dashboard_files/libs/quarto-dashboard/quarto-dashboard.js","neurotrial_dashboard_files/libs/quarto-dashboard/stickythead.js","neurotrial_dashboard_files/libs/quarto-dashboard/datatables.min.js","neurotrial_dashboard_files/libs/quarto-dashboard/pdfmake.min.js","neurotrial_dashboard_files/libs/quarto-dashboard/vfs_fonts.js","neurotrial_dashboard_files/libs/quarto-dashboard/web-components.js","neurotrial_dashboard_files/libs/quarto-dashboard/components.js"]
_static_assets = {"/" + sa: Path(__file__).parent / sa for sa in _static_assets}

app = App(
    Path(__file__).parent / "neurotrial_dashboard.html",
    server,
    static_assets=_static_assets,
)
