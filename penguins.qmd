---
title: "NeuoTrialomics"
format: dashboard
logo: stride_lab_logo_transparent.png
server: shiny
---

```{python}
#| context: setup
import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from shiny import render, reactive, ui
from shinywidgets import render_widget  
from palmerpenguins import load_penguins

import pandas as pd
import plotly.express as px
```

## Row {.flow}

```{python}
#| title: Filter Options
#| expandable: false

penguins = load_penguins()
df = pd.read_csv("data_for_dashboard.csv")

cluster_options = ['Show All'] + list(df['cluster'].unique())
ui.input_select("cluster_name2", "Select Cluster", choices=cluster_options, selected='Show All')

```

## Row

```{python}
@render_widget  
def tane_scatter():  
    cluster = input.cluster_name2()
    if cluster == 'Show All':
        filtered_df = df
    else:
        filtered_df = df[df['cluster'] == cluster]

    scatterplot = px.scatter(
        filtered_df, 
        x='x', 
        y='y', 
        color='cluster',
        hover_data={'x': False, 'y': False, 'nct_id': True, 'brief_title': True},
        title=f"t-SNE Visualization of {'All Clusters' if cluster == 'Show All' else cluster}",
        labels={'x': 't-SNE X', 'y': 't-SNE Y'},
        template="plotly_white",
        #legend='cluster'
    ).update_traces(marker=dict(size=10, line=dict(width=1, color='DarkSlateGrey')))#.update_layout(
        #width=900,
        #height=700,
        ##)
    return scatterplot  
```

```{python}
@render_widget  
def phase_bar_chart():  
    cluster = input.cluster_name2()
    if cluster == 'Show All':
        filtered_df = df
    else:
        filtered_df = df[df['cluster'] == cluster]
    phase_order = [
        'Early Phase 1',
        'Phase 1',
        'Phase 1/2',
        'Phase 2',
        'Phase 2/3',
        'Phase 3',
        'Phase 4',
        'Not Applicable'
    ]
        # Count the occurrences of each phase
    phase_counts = filtered_df['phase'].value_counts().reindex(phase_order, fill_value=0).reset_index()
    phase_counts.columns = ['phase', 'count']
    
    # Create the bar chart with counts displayed on top of the bars
    bar_chart = px.bar(
        phase_counts, 
        x='phase', 
        y='count',
        title="Distribution of Phases",
        template="plotly_white",
        category_orders={'phase': phase_order},
        color_discrete_sequence=px.colors.qualitative.Pastel1,  # Set a more vibrant color scale
        text='count'  # Display counts on top of the bars
    )
    bar_chart.update_traces(textposition='outside', textfont_size=12)

    return bar_chart 
```